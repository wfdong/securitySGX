commit 1a75eb4d0954b1f3eab76a211647de8a80031170
Author: Jo Van Bulck <jo.vanbulck@cs.kuleuven.be>
Date:   Wed Apr 13 13:55:33 2022 +0200

    SGX-Step SDK patches to reconfigure AEP/TCS.

diff --git a/common/inc/sgx_urts.h b/common/inc/sgx_urts.h
index 691efbc9..07240fa7 100644
--- a/common/inc/sgx_urts.h
+++ b/common/inc/sgx_urts.h
@@ -76,6 +76,11 @@ typedef struct _sgx_kss_config_t
 extern "C" {
 #endif
 
+//XXX
+void* SGXAPI sgx_get_aep(void);
+void  SGXAPI sgx_set_aep(void *aep);
+void* SGXAPI sgx_get_tcs(void);
+
 typedef uint8_t sgx_launch_token_t[1024];
 
 /* Convenient macro to be passed to sgx_create_enclave(). */
diff --git a/psw/urts/linux/enter_enclave.S b/psw/urts/linux/enter_enclave.S
index fc3828e1..6b6e8a26 100644
--- a/psw/urts/linux/enter_enclave.S
+++ b/psw/urts/linux/enter_enclave.S
@@ -32,6 +32,29 @@
 
 #include "enter_enclave.h"
 
+/* XXX runtime reconfigurable indirect Asynchronous Exit Pointer (AEP)
+ * (ld complains when initializing __default_async_exit_pointer here, so we have
+ * to do it at runtime, when EENTERing, below in .Ldo_eenter.
+ */
+    .data
+g_aep_pointer:
+    .word 0x0
+    .word 0x0
+    .word 0x0
+    .word 0x0
+
+/* XXX HACK: SGX stores TCS address in rbx on interrupt, but this value is
+ * somehow not properly stored in Linux's pt_regs struct available to our
+ * driver's interrupt handler. We therefore store TCS address here in the
+ * untrusted runtime, so as to be able to explicitly communicate TCS to our
+ * driver...
+ */
+    .data
+g_tcs:
+    .word 0x0
+    .word 0x0
+    .word 0x0
+    .word 0x0
 
 /* int __morestack(const tcs_t *tcs, const int fn, const void *ocall_table, const void *ms, CTrustThread *trust_thread); */
 .file "enter_enclave.S"
@@ -98,9 +121,17 @@ EENTER_PROLOG
     je   1f
     vzeroupper
 1:
-    mov frame_arg0, %xbx                        /* tcs addr */
-    lea_pic .Lasync_exit_pointer, %xcx          /* aep addr */
-    mov $SE_EENTER, %xax                        /* EENTER leaf */
+    mov         frame_arg0, %xbx                /* tcs addr */
+    lea_pic     g_tcs, %xax
+    mov         %xbx, (%xax)
+    /* fetch AEP; init when NULL */
+    lea_pic     g_aep_pointer, %xax
+    mov         (%xax), %xcx                    /* aep addr */
+    cmp         $0x0, %xcx
+    jnz 1f
+    lea_pic     __default_async_exit_pointer, %xcx
+    mov         %xcx, (%xax)
+1:  mov         $SE_EENTER, %xax                /* EENTER leaf */
 
 .Leenter_inst:
     ENCLU
@@ -158,15 +189,27 @@ EENTER_PROLOG
 .Loret:
     EENTER_EPILOG
 
-.Lasync_exit_pointer:
+__default_async_exit_pointer:
     ENCLU
     _CET_ENDBR
 
 .size __morestack, .-__morestack
 
 
-DECLARE_GLOBAL_FUNC get_aep
-    lea_pic     .Lasync_exit_pointer, %xax
+ DECLARE_GLOBAL_FUNC get_aep
+    lea_pic     g_aep_pointer, %xax
+    mov         (%xax), %xax
+    ret
+ 
+DECLARE_GLOBAL_FUNC set_aep
+    lea_pic     g_aep_pointer, %xax
+    mov         naked_arg0, %xbx
+    mov         %xbx, (%xax)
+    ret
+
+DECLARE_GLOBAL_FUNC get_tcs
+    lea_pic     g_tcs, %xax
+    mov         (%xax), %xax
     ret
 
 DECLARE_GLOBAL_FUNC get_eenterp
diff --git a/psw/urts/linux/urts.cpp b/psw/urts/linux/urts.cpp
index 17c82de4..b8dbffe4 100644
--- a/psw/urts/linux/urts.cpp
+++ b/psw/urts/linux/urts.cpp
@@ -40,6 +40,26 @@
 
 #include "urts_com.h"
 
+//XXX
+extern "C" void *get_aep();
+extern "C" void  set_aep(void *aep);
+extern "C" void *get_tcs();
+
+extern "C" void* sgx_get_aep(void)
+{
+    return get_aep();
+}
+
+extern "C" void* sgx_get_tcs(void)
+{
+    return get_tcs();
+}
+
+extern "C" void sgx_set_aep(void *aep)
+{
+    set_aep(aep);
+}
+
 static bool inline _check_ex_params_(const uint32_t ex_features, const void* ex_features_p[32])
 {
     //update last feature index if it fails here
diff --git a/psw/urts/linux/urts.lds b/psw/urts/linux/urts.lds
index 44897f21..c504e3b9 100644
--- a/psw/urts/linux/urts.lds
+++ b/psw/urts/linux/urts.lds
@@ -1,5 +1,8 @@
 {
     global:
+        sgx_get_aep;
+        sgx_set_aep;
+        sgx_get_tcs;
         sgx_create_enclave;
         sgx_create_enclave_ex;
         sgx_destroy_enclave;
diff --git a/sdk/simulation/urtssim/urts_deploy.c b/sdk/simulation/urtssim/urts_deploy.c
index ac5f6223..cdf66aca 100644
--- a/sdk/simulation/urtssim/urts_deploy.c
+++ b/sdk/simulation/urtssim/urts_deploy.c
@@ -57,6 +57,23 @@ sgx_status_t sgx_create_encrypted_enclave()
 }
 
 
+void *sgx_get_aep(void)
+{
+    printf("Please use the correct uRTS library from PSW package.\n");
+    return NULL;
+}
+
+void sgx_set_aep(void* p)
+{
+    printf("Please use the correct uRTS library from PSW package.\n");
+}
+
+void *sgx_get_tcs(void)
+{
+    printf("Please use the correct uRTS library from PSW package.\n");
+    return NULL;
+}
+
 void sgx_debug_load_state_add_element(){};
 void sgx_debug_unload_state_remove_element(){};
 void sgx_destroy_enclave(){};
